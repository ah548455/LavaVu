#!/usr/bin/python
#This script generates Extensions.h/cpp for handling OpenGL extensions
#Define the functions required in the lists below, 
#second list is for functions requiring retrieval by pointer on windows only
#We don't use glew because it doesn't work with OSMesa

functions = [
"glBlendFuncSeparate",
"glPointParameterfv",
"glPointParameterf",
"glBindBuffer",
"glGenBuffers",
"glIsBuffer",
"glMapBuffer",
"glBufferData",
"glBufferSubData",
"glUnmapBuffer",
"glDeleteBuffers",
"glCreateShader",
"glDeleteShader",
"glShaderSource",
"glCompileShader",
"glAttachShader",
"glIsShader",
"glGetShaderiv",
"glGetShaderInfoLog",
"glCreateProgram",
"glDeleteProgram",
"glLinkProgram",
"glGetProgramiv",
"glUseProgram",
"glGetProgramInfoLog",
"glGenRenderbuffersEXT",
"glBindRenderbufferEXT",
"glRenderbufferStorageEXT",
"glGenFramebuffersEXT",
"glFramebufferRenderbufferEXT",
"glFramebufferTexture2DEXT",
"glCheckFramebufferStatusEXT",
"glBindFramebufferEXT",
"glDeleteRenderbuffersEXT",
"glDeleteFramebuffersEXT",
"glGetUniformLocation",
"glUniform1f",
"glUniform1i",
"glUniform2f",
"glUniform1fv",
"glUniform2fv",
"glUniform3fv",
"glUniform4fv",
"glUniformMatrix4fv",
"glGetAttribLocation",
"glEnableVertexAttribArray",
"glVertexAttribPointer",
"glDisableVertexAttribArray",
"glIsProgram",
  ]

win_functions = [
"glActiveTexture", 
"glDrawRangeElements",
"glTexImage3D",
"glTexSubImage3D",
"glGenerateMipmapEXT",
]

#Write the header
header = open("src/Extensions.h", "w")

header.write("//AUTOGENERATED: Global includes header for LavaVu\n")
header.write("#ifndef Extensions__\n")
header.write("#define Extensions__\n")
header.write("\n")
header.write("//Define pointers to required gl 2.0+ functions\n")
header.write("\n")
header.write("typedef void* (*getProcAddressFN)(const char* procName);\n")
header.write("\n")
header.write("#if defined _WIN32\n")
header.write("#include "Include.h"\n")

for fn in win_functions:
    header.write("extern PFN" + fn.upper() + "PROC " + fn + ";\n")

header.write("#define EXTENSION_POINTERS\n")
header.write("#else\n")
header.write("extern getProcAddressFN GetProcAddress;\n")
header.write("#endif\n")
header.write("\n")
header.write("#ifdef EXTENSION_POINTERS\n")

for fn in functions:
    header.write("extern PFN" + fn.upper() + "PROC " + fn + ";\n")

header.write("#endif\n")
header.write("\n")
header.write("void OpenGL_Extensions_Init();\n")
header.write("\n")
header.write("#endif //Extensions__\n")
header.write("\n")

header.close()

#Write the source
source = open("src/Extensions.cpp", "w")

source.write("//AUTOGENERATED: Global extension handler for LavaVu\n")
source.write("#include \"Extensions.h\"\n")
source.write("\n")
source.write("//Define pointers to required gl 2.0+ functions\n")
source.write("\n")
source.write("#if defined _WIN32\n")
source.write("#define GetProcAddress(arg) wglGetProcAddress((LPCSTR)arg)\n")

for fn in win_functions:
    source.write("PFN" + fn.upper() + "PROC " + fn + ";\n")

source.write("#else\n")
source.write("getProcAddressFN GetProcAddress;\n")
source.write("#endif\n")
source.write("\n")
source.write("#ifdef EXTENSION_POINTERS\n")

for fn in functions:
    source.write("PFN" + fn.upper() + "PROC " + fn + ";\n")

source.write("#endif\n")
source.write("\n")
source.write("void OpenGL_Extensions_Init()\n")
source.write("{\n")
source.write("#ifdef EXTENSION_POINTERS\n")
source.write("#if defined _WIN32\n")

for fn in win_functions:
    source.write("   " + fn + " = (PFN" + fn.upper() + "PROC) GetProcAddress(\"" + fn + "\");\n")

source.write("#endif\n")

for fn in functions:
    source.write("   " + fn + " = (PFN" + fn.upper() + "PROC) GetProcAddress(\"" + fn + "\");\n")

source.write("#endif\n")
source.write("}\n")
source.write("\n")
source.write("\n")

source.close()

